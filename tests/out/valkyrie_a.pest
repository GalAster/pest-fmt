program = _{SOI ~ statement* ~ EOI}

statement =  {
    emptyStatement
  | importStatement ~ eos?
  | traitStatement ~ eos?
  | controlFlow ~ eos?
  | assignStatement ~ eos?
  | defineStatement ~ eos?
  | annotation ~ eos?
  | expression
}

emptyStatement =  {eos|Separate}
eos            =  {Semicolon}
comma_or_semi  = _{Comma|Semicolon}
block_or_stmt  = _{block|Set ~ statement}

importStatement   =  {
    Import ~ Dot* ~ use_alias
  | Import ~ Dot* ~ use_module_select
  | Import ~ use_module_string
}
use_alias         = !{String ~ As ~ SYMBOL|SYMBOL ~ (ModuleSplit ~ SYMBOL)* ~ As ~ SYMBOL}
use_module_select = !{SYMBOL ~ (ModuleSplit ~ SYMBOL)* ~ (ModuleSplit ~ (module_block|Star))?}
use_module_string = !{String ~ (ModuleSplit ~ (module_block|Star))?}
module_block      =  {"{" ~ module_tuple ~ (comma_or_semi? ~ module_tuple)* ~ comma_or_semi? ~ "}"}
module_tuple      =  {use_alias|use_module_select}
ModuleSplit       = _{Dot|Proportion}

With   = @{"with"}
Import = @{"import"}
As     = @{"as"}

controlFlow = _{if_statement|for_statement}
block       = !{"{" ~ statement+ ~ "}"}

if_statement   =  {if_nested_else|if_nested|if_single_else|if_single}
if_single      = _{If ~ condition ~ block}
if_nested      = _{If ~ condition ~ block ~ else_if_block+}
if_single_else = _{If ~ condition ~ block ~ if_else_block}
if_nested_else = _{If ~ condition ~ block ~ else_if_block+ ~ if_else_block}
else_if_block  = _{Else ~ If ~ condition ~ block}
if_else_block  = _{Else ~ block}

If   = @{"if"}
Else = @{"else"}

for_statement =  {For ~ for_in_loop}
for_in_loop   =  {SYMBOL ~ In ~ expr ~ block}

For = @{"for"}
In  = @{"in"}

Return = @{"return"}
Break  = @{"break"}
Pass   = @{"pass"}

traitStatement      =  {trait_head ~ "{" ~ traitExpression* ~ "}"}
trait_head          = _{Trait ~ SYMBOL ~ classExtend?}
traitExpression     =  {interfaceFunction ~ type_hint ~ comma_or_semi?}
interfaceFunction   =  {SYMBOL ~ "(" ~ interfaceParameters? ~ ")" ~ Question?}
interfaceParameters =  {expr ~ SYMBOL ~ (Comma ~ expr ~ SYMBOL)*}
classExtend         = ${"extend"}
Trait               = @{"trait"}

assignStatement =  {Let ~ assign_terms}
assign_terms    = _{
    "(" ~ assign_name ~ ")" ~ type_hint? ~ block_or_stmt?
  | assign_name ~ type_hint? ~ block_or_stmt?
}
assign_name     = _{assign_pair ~ (Comma ~ assign_pair)* ~ Comma?}
assign_pair     =  {(!(SYMBOL ~ (Comma|Set|Colon|Semicolon|"{"|"}"|"("|")"|"<"|">")) ~ SYMBOL)* ~ Symbol}

Let = @{"let"}

defineStatement        =  {Def ~ define_terms}
define_terms           = _{
    assign_pair ~ parametric_types ~ define_parameter ~ type_hint? ~ parametric_terms* ~ block_or_stmt
  | assign_pair ~ define_parameter ~ type_hint? ~ parametric_types_where? ~ parametric_terms* ~ block_or_stmt
}
define_parameter       =  {
    "(" ~ ")"
}
parametric_terms       =  {
    expr ~ Colon ~ expr ~ eos?
}
parametric_types       =  {"<" ~ parametric_types_pair ~ (Comma ~ parametric_types_pair)* ~ ">"}
parametric_types_pair  =  {(Plus|Minus)? ~ SYMBOL}
parametric_types_where =  {
    Where ~ SYMBOL ~ (Comma ~ SYMBOL)* ~ eos?
}

Def   = @{"def"}
Where = @{"where"}

annotation      =  {annotation_call+ ~ statement}
annotation_call = @{At ~ (list|apply|Symbol)}

apply    =  {
    generic_type? ~ "(" ~ apply_kv? ~ (Comma ~ apply_kv)* ~ Comma? ~ ")"
}
apply_kv =  {SYMBOL ~ Colon ~ expr|expr}

function_name   =  {SYMBOL}
function_module =  {(namespace ~ Dot)? ~ (SYMBOL ~ Dot)*}

expression    =  {expr ~ eos?}
expr          = !{
    trinocular
  | term ~ (Infix ~ term)*
}
term          =  {Prefix* ~ node ~ Suffix*}
node          =  {"(" ~ expr ~ ")"|tuple|bracket_call|data}
tuple         =  {"(" ~ expr ~ (Comma ~ expr)* ~ Comma? ~ ")"}
bracket_call  =  {data ~ (slice|generic_type|apply)+}
bracket_apply =  {Symbol ~ dict}
condition     = _{"(" ~ expr ~ ")"|expr}
trinocular    =  {
    term ~ Question ~ term ~ Colon ~ term
  | term ~ If ~ term ~ Else ~ term
}
dot_call      =  {term ~ Dot ~ (Integer|Symbol)}

type_hint    =  {Colon ~ expr}
generic_type =  {"<" ~ expr ~ (Comma ~ expr)* ~ Comma? ~ ">"}

Type = @{"type"}

data        = ${dict|list|Null|Unit|Boolean|Byte|Number|String|Symbol}
dict        =  {"{" ~ key_value? ~ (Comma ~ key_value)* ~ Comma? ~ "}"}
list        =  {"[" ~ expr? ~ (Comma ~ expr)* ~ Comma? ~ "]"}
slice       =  {"[" ~ index ~ (Comma ~ index)* ~ Comma? ~ "]"}
index       =  {index_step|index_range|expr}
key_value   = !{key_valid ~ Colon ~ expr}
key_valid   = !{Integer|SYMBOL|String}
index_range = !{expr? ~ Colon ~ expr?}
index_step  = !{expr? ~ Colon ~ expr? ~ Colon ~ expr?}

Null = @{"null"}
Unit = !{"(" ~ ")"}

Boolean = !{True|False}
True    = @{"true"}
False   = @{"false"}

Byte     = ${Byte_BIN|Byte_OCT|Byte_HEX}
Byte_BIN = ${Zero ~ B ~ (Underline? ~ ASCII_BIN_DIGIT)+}
Byte_OCT = ${Zero ~ O ~ (Underline? ~ ASCII_OCT_DIGIT)+}
Byte_HEX = ${Zero ~ X ~ (Underline? ~ ASCII_HEX_DIGIT)+}

Number     = ${Complex|Decimal|DecimalBad|Integer}
Decimal    = ${Integer ~ Dot ~ ASCII_DIGIT+}
DecimalBad = ${Integer ~ Dot|Dot ~ ASCII_DIGIT+}
Integer    = @{Zero|ASCII_NONZERO_DIGIT ~ (Underline? ~ ASCII_DIGIT)*}
Complex    =  {(Decimal|Integer) ~ SYMBOL}

String            = ${SYMBOL? ~ (StringNormal|StringLiteral|StringEmpty)}
StringLiteral     =  {StringStart ~ StringLiteralText ~ StringEnd}
StringNormal      =  {Quotation ~ StringText ~ Quotation}
StringEmpty       =  {Quotation{2}|Apostrophe{2}}
StringLiteralText =  {(!(Apostrophe ~ PEEK) ~ ANY)*}
StringText        =  {(Solidus ~ (Solidus|Quotation)|!Quotation ~ ANY)*}
StringStart       = @{Apostrophe{1} ~ (Apostrophe*)}
StringEnd         = @{POP ~ Apostrophe{1}}

WHITESPACE = _{NEWLINE|SPACE_SEPARATOR|"\t"}

COMMENT =  {MultiLineComment|LineCommentSimple|LineCommentTodo|LineCommentFixme|LineCommentWarning}

LineCommentSimple = ${"///" ~ (!NEWLINE ~ ANY)*}

LineCommentTodo = ${"//?" ~ (!NEWLINE ~ ANY)*}

LineCommentFixme = ${"//!" ~ (!NEWLINE ~ ANY)*}

LineCommentWarning = ${"//*" ~ (!NEWLINE ~ ANY)*}

MultiLineComment = ${"%%%" ~ (MultiLineComment|!"%%%" ~ ANY)* ~ "%%%"}

Symbol    = ${namespace|Underline+|SYMBOL}
namespace = ${SYMBOL ~ (Proportion ~ SYMBOL)+}
SYMBOL    = @{
    XID_START ~ XID_CONTINUE*
  | Underline ~ XID_CONTINUE+
}
Keywords  = _{If|For}

Zero = _{"0"}
X    = _{"x"|"X"}
O    = _{"o"|"O"}
B    = _{"b"|"B"}

Prefix = @{
    (Bang|Plus|Minus|Star)
}
Suffix = @{
    (Bang|Question)
  | DoubleBang
}
Infix  = _{
    Set
  | Plus
  | Minus
  | Multiply
  | CenterDot
  | Kronecker
  | TensorProduct
  | Divide
  | Quotient
  | Modulo
  | Power
  | Grater
  | GraterEqual
  | Equal
  | Dot
}

Set = @{"="}

Or     = @{"|"}
LazyOr = @{"||"}

Star    = @{"*"}
Slash   = @{"/"}
Solidus = @{"\\"}

Proportion = @{"::"|"∷"}
Comma      = @{","|"，"}
Dot        = @{"."}
Separate   = @{";;"}
Semicolon  = @{";"|"；"}
Colon      = @{":"|"："}

Question  = @{"?"}
Underline = @{"_"}

Load        = @{"<<<"|"⋘"}
Save        = @{">>>"|"⋙"}
LeftShift   = @{"<<"|"≪"}
RightShift  = @{">>"|"≫"}
LessEqual   = @{"<="}
GraterEqual = @{">="}
Less        = @{"<"}
Grater      = @{">"}

Equivalent    = @{"==="}
NotEquivalent = @{"=!="}
Equal         = @{"=="}
NotEqual      = @{"!="|"≠"}

Plus  = @{"+"}
Minus = @{"-"}

Multiply      = @{Star|"×"}
CenterDot     = @{"⋅"}
Kronecker     = @{"⊗"}
TensorProduct = @{"⊙"}
Divide        = @{Slash|"÷"}
Quotient      = @{"//"}
Modulo        = @{"%"}
Remainder     = @{"⁒"}

Power = @{"^"}
Surd  = @{"√"}

Increase = @{"++"}
Decrease = @{"--"}

To = @{"->"}

Elvis = @{":?"}
Map   = @{"/@"}

Quote      = @{"`"}
Acute      = @{"´"}
Apostrophe = @{"'"}
Quotation  = @{"\""}

LogicOr  = @{"||"|"∧"}
LogicAnd = @{"&&"|"∨"}
LogicNot = @{"¬"}

Ellipsis = @{"..."|"…"}

LogicXor = @{"⊕"}
MapAll   = @{"//@"}

Output = @{"%%"}

Concat   = @{"~~"}
Destruct = @{"~="}

DoubleBang = @{"!!"}
Bang       = @{"!"}

Sharp = @{"#"}

Curry = @{"@@@"}
Apply = @{"@@"}
At    = @{"@"}


